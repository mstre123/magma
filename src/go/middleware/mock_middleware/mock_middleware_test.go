// Copyright 2021 The Magma Authors.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: middleware.go

// Package mock_middleware is a generated GoMock package.
package mock_middleware

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// Mockmiddleware is a mock of middleware interface.
type Mockmiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockmiddlewareMockRecorder
}

// MockmiddlewareMockRecorder is the mock recorder for Mockmiddleware.
type MockmiddlewareMockRecorder struct {
	mock *Mockmiddleware
}

// NewMockmiddleware creates a new mock instance.
func NewMockmiddleware(ctrl *gomock.Controller) *Mockmiddleware {
	mock := &Mockmiddleware{ctrl: ctrl}
	mock.recorder = &MockmiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockmiddleware) EXPECT() *MockmiddlewareMockRecorder {
	return m.recorder
}

// GetUnaryClientInterceptor mocks base method.
func (m *Mockmiddleware) GetUnaryClientInterceptor() grpc.DialOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnaryClientInterceptor")
	ret0, _ := ret[0].(grpc.DialOption)
	return ret0
}

// GetUnaryClientInterceptor indicates an expected call of GetUnaryClientInterceptor.
func (mr *MockmiddlewareMockRecorder) GetUnaryClientInterceptor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnaryClientInterceptor", reflect.TypeOf((*Mockmiddleware)(nil).GetUnaryClientInterceptor))
}

// withCaptureUnaryClientInterceptor mocks base method.
func (m *Mockmiddleware) withCaptureUnaryClientInterceptor() grpc.DialOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "withCaptureUnaryClientInterceptor")
	ret0, _ := ret[0].(grpc.DialOption)
	return ret0
}

// withCaptureUnaryClientInterceptor indicates an expected call of withCaptureUnaryClientInterceptor.
func (mr *MockmiddlewareMockRecorder) withCaptureUnaryClientInterceptor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "withCaptureUnaryClientInterceptor", reflect.TypeOf((*Mockmiddleware)(nil).withCaptureUnaryClientInterceptor))
}

// withPassthroughUnaryClientInterceptor mocks base method.
func (m *Mockmiddleware) withPassthroughUnaryClientInterceptor() grpc.DialOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "withPassthroughUnaryClientInterceptor")
	ret0, _ := ret[0].(grpc.DialOption)
	return ret0
}

// withPassthroughUnaryClientInterceptor indicates an expected call of withPassthroughUnaryClientInterceptor.
func (mr *MockmiddlewareMockRecorder) withPassthroughUnaryClientInterceptor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "withPassthroughUnaryClientInterceptor", reflect.TypeOf((*Mockmiddleware)(nil).withPassthroughUnaryClientInterceptor))
}
